from collections import defaultdict
from datetime import datetime

from aiogram import Bot, Dispatcher

from database import requests as rq

from database.models import Pair
from handlers.survey_handlers import start_pair_survey
from logger import setup_logger

logger = setup_logger("surveys", "surveys.log")

async def send_surveys(bot: Bot, dp: Dispatcher) -> None:
    logger.info("üì§ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–ø—Ä–æ—Å–æ–≤")
    await rq.reset_incomplete_surveys()

    today = datetime.now().strftime('%d.%m.%Y')
    pairs = await rq.get_ready_pairs_by_date(today)

    # —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    by_user: dict[str, list[Pair]] = defaultdict(list)

    for p in pairs:
        by_user[p.subject].append(p)

    for subject, user_pairs in by_user.items():
        try:
            worker = await rq.get_worker_by_fullname(subject)
        except Exception as e:
            logger.error(f"get_worker_by_fullname: {e}. subject: {subject}.")

        if not worker or not worker.chat_id:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ chat_id –¥–ª—è {subject}")
            continue

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        if any(p.status == "in_progress" for p in user_pairs):
            logger.warning(f"–î–ª—è {subject} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å")
            continue                   # –¥–æ–∂–¥—ë–º—Å—è –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è

        pair = user_pairs[0]     # –±–µ—Ä—ë–º —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω

        try:
            # –ü–æ–º–µ—á–∞–µ–º ¬´–≤ —Ä–∞–±–æ—Ç–µ¬ª
            await rq.update_pair_status(pair.id, "in_progress")

            file_id = await rq.get_file_id_by_name(pair.object)

            await start_pair_survey(bot, int(worker.chat_id), pair, dp=dp, file_id=file_id)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø—Ä–æ—Å –¥–ª—è {pair.subject} –æ—Ç {pair.date}, id: {pair.id}")
        except Exception as e:
            logger.error(f"Failed to start pair survey: {e}. id: {pair.id}")
